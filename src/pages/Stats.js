import React, { useEffect, useState } from 'react';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer
} from 'recharts';
import styles from '../pages/Stats.module.css';
import GoalEditor from '../components/GoalEditor';

const Stats = ({ user }) => {
  const [workouts, setWorkouts] = useState([]);
  const [selectedMonth, setSelectedMonth] = useState(null);
  const [localUser, setLocalUser] = useState(user);

  useEffect(() => {
    if (!user) return;

    setLocalUser(user);

    fetch("http://localhost:5001/workouts")
      .then(res => res.json())
      .then(data => {
        const filtered = data
          .filter(workout => workout.userId === user.id)
          .sort((a, b) => new Date(a.date) - new Date(b.date));
        setWorkouts(filtered);
      })
      .catch(err => console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", err));
  }, [user]);

  if (!workouts || workouts.length === 0) {
    return <h2 className={styles.container}>üìä –ù—è–º–∞ –Ω–∞–ª–∏—á–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.</h2>;
  }

  const filteredWorkouts = selectedMonth === null
    ? workouts
    : workouts.filter(w =>
        new Date(w.date).getMonth() === selectedMonth
      );

  const totalDistance = filteredWorkouts.reduce((sum, workout) => sum + parseFloat(workout.distance), 0);
  const totalDuration = filteredWorkouts.reduce((sum, workout) => sum + parseFloat(workout.duration), 0);
  const avgSpeed = (totalDistance / totalDuration).toFixed(2);
  const avgDuration = (totalDuration / filteredWorkouts.length || 1).toFixed(1);
  const totalWorkouts = filteredWorkouts.length;

  const intensityCount = { light: 0, medium: 0, extreme: 0 };
  filteredWorkouts.forEach(workout => intensityCount[workout.intensity]++);

  const mostCommonIntensity = Object.entries(intensityCount).sort((a, b) => b[1] - a[1])[0]?.[0];
  const intensityLabel = {
    light: '–õ–µ–∫–æ',
    medium: '–°—Ä–µ–¥–Ω–æ',
    extreme: '–ï–∫—Å—Ç—Ä–µ–º–Ω–æ'
  }[mostCommonIntensity];

  const longestWorkout = filteredWorkouts.reduce((max, w) =>
    parseFloat(w.duration) > parseFloat(max.duration) ? w : max, filteredWorkouts[0]);

  const longestByTime = filteredWorkouts.reduce((max, w) =>
    parseFloat(w.duration) > parseFloat(max.duration) ? w : max, filteredWorkouts[0]);

  const longestByDistance = filteredWorkouts.reduce((max, w) =>
    parseFloat(w.distance) > parseFloat(max.distance) ? w : max, filteredWorkouts[0]);

  const mostIntenseWorkout = filteredWorkouts.find(w => w.intensity === 'extreme') ||
                             filteredWorkouts.find(w => w.intensity === 'medium') ||
                             filteredWorkouts.find(w => w.intensity === 'light');

  const chartData = filteredWorkouts.map(workout => ({
    date: workout.date,
    distance: parseFloat(workout.distance),
    intensity: workout.intensity,
  }));

  const monthlyGoal = localUser?.goal?.value || 0;
  const rawProgress = (totalDistance / monthlyGoal) * 100;
  const monthlyProgress = Math.min(rawProgress, 100);

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</h1>

      {/* –§–∏–ª—Ç—ä—Ä –ø–æ –º–µ—Å–µ—Ü */}
      <div className={styles.summary}>
        <label htmlFor="month">–§–∏–ª—Ç—Ä–∏—Ä–∞–π –ø–æ –º–µ—Å–µ—Ü: </label>
        <select
          id="month"
          value={selectedMonth ?? ""}
          onChange={(e) => {
            const value = e.target.value;
            setSelectedMonth(value === "" ? null : Number(value));
          }}
        >
          <option value="">–í—Å–∏—á–∫–∏</option>
          <option value="0">–Ø–Ω—É–∞—Ä–∏</option>
          <option value="1">–§–µ–≤—Ä—É–∞—Ä–∏</option>
          <option value="2">–ú–∞—Ä—Ç</option>
          <option value="3">–ê–ø—Ä–∏–ª</option>
          <option value="4">–ú–∞–π</option>
          <option value="5">–Æ–Ω–∏</option>
          <option value="6">–Æ–ª–∏</option>
          <option value="7">–ê–≤–≥—É—Å—Ç</option>
          <option value="8">–°–µ–ø—Ç–µ–º–≤—Ä–∏</option>
          <option value="9">–û–∫—Ç–æ–º–≤—Ä–∏</option>
          <option value="10">–ù–æ–µ–º–≤—Ä–∏</option>
          <option value="11">–î–µ–∫–µ–º–≤—Ä–∏</option>
        </select>
      </div>

      {filteredWorkouts.length === 0 ? (
        <p className={styles.warning}>üìÖ –ù—è–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –º–µ—Å–µ—Ü.</p>
      ) : (
        <>
          <div className={styles.summary}>
            <p>–û–±—â–æ –∏–∑–º–∏–Ω–∞—Ç–∏ –∫–∏–ª–æ–º–µ—Ç—Ä–∏: <strong>{totalDistance} –∫–º</strong></p>
            <p>–°—Ä–µ–¥–Ω–æ –≤—Ä–µ–º–µ—Ç—Ä–∞–µ–Ω–µ: <strong>{avgDuration} –º–∏–Ω</strong></p>
            <p>–°—Ä–µ–¥–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç: <strong>{avgSpeed} –∫–º/–º–∏–Ω</strong></p>
          </div>

          <div className={styles.summary}>
            <p>–û–±—â –±—Ä–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: <strong>{totalWorkouts}</strong></p>
            <p>–ù–∞–π-–¥—ä–ª–≥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: <strong>{longestWorkout.duration} –º–∏–Ω / {longestWorkout.distance} –∫–º</strong></p>
            <p>–ù–∞–π-—á–µ—Å—Ç–æ —Å—Ä–µ—â–∞–Ω–∞ –∏–Ω—Ç–µ–Ω–∑–∏–≤–Ω–æ—Å—Ç: <strong>{intensityLabel}</strong></p>
          </div>

          {/* üéØ –ú–µ—Å–µ—á–Ω–∞ —Ü–µ–ª –∏ –ø—Ä–æ–≥—Ä–µ—Å */}
          <div className={styles.summary}>
            <GoalEditor
              user={localUser}
              onGoalUpdate={(updatedGoal) =>
                setLocalUser({ ...localUser, goal: updatedGoal })
              }
            />
            <div className={styles.progressBar}>
              <div
                className={styles.progressFill}
                style={{ width: `${monthlyProgress}%` }}
              ></div>
            </div>
            <p>{monthlyProgress.toFixed(1)}% –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ</p>
            {rawProgress > 100 && (
              <p className={styles.success}>
                ‚úÖ –¶–µ–ª—Ç–∞ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω–∞! –° {Math.floor(rawProgress - 100)}% –Ω–∞–¥ –Ω–µ—è!
              </p>
            )}
          </div>

          <h2 className={styles.subtitle}>üîç –¢–æ–ø 3 –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</h2>
          <div className={styles.summary}>
            <p>‚è≥ –ù–∞–π-–¥—ä–ª–≥–∞ –ø–æ –≤—Ä–µ–º–µ: <strong>{longestByTime.duration} –º–∏–Ω</strong> –Ω–∞ {longestByTime.date}</p>
            <p>üö¥ –ù–∞–π-–¥—ä–ª–≥–∞ –ø–æ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ: <strong>{longestByDistance.distance} –∫–º</strong> –Ω–∞ {longestByDistance.date}</p>
            <p>üí™ –ù–∞–π-–∏–Ω—Ç–µ–Ω–∑–∏–≤–Ω–∞: <strong>{intensityLabel}</strong> –Ω–∞ {mostIntenseWorkout?.date}</p>
          </div>

          <div className={styles.legend}>
            <span><span className={styles.lightDot}></span> –õ–µ–∫–∞</span>
            <span><span className={styles.mediumDot}></span> –°—Ä–µ–¥–Ω–∞</span>
            <span><span className={styles.extremeDot}></span> –ï–∫—Å—Ç—Ä–µ–º–Ω–∞</span>
          </div>

          <h2 className={styles.subtitle}>üìà –ù–∞–ø—Ä–µ–¥—ä–∫ –≤—ä–≤ –≤—Ä–µ–º–µ—Ç–æ</h2>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={chartData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Line
                type="monotone"
                dataKey="distance"
                data={chartData.filter(d => d.intensity === 'light')}
                stroke="#90ee90"
                name="–õ–µ–∫–∞"
                strokeWidth={2}
              />
              <Line
                type="monotone"
                dataKey="distance"
                data={chartData.filter(d => d.intensity === 'medium')}
                stroke="#ffc107"
                name="–°—Ä–µ–¥–Ω–∞"
                strokeWidth={2}
              />
              <Line
                type="monotone"
                dataKey="distance"
                data={chartData.filter(d => d.intensity === 'extreme')}
                stroke="#dc3545"
                name="–ï–∫—Å—Ç—Ä–µ–º–Ω–∞"
                strokeWidth={2}
              />
            </LineChart>
          </ResponsiveContainer>
        </>
      )}
    </div>
  );
};

export default Stats;
